/**
 * This Gradle build script is designed to automate the generation of the TypeScript code from the OpenAPI specifications,
 * It orchestrates the entire process, from code generation to copying the generated files in the correct source directories
 * (services, typings).
 * It includes verification steps to confirm the outcome of the generation.
 */
plugins {
    id 'adyen.sdk-automation-conventions'
}

import com.adyen.sdk.Service
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

project.ext {
    generator = 'typescript'
}

def services = project.ext.services as List<Service>

// Service renaming
Map<String, String> serviceNaming = project.ext.serviceNamingCamel

services.each { Service svc ->
    // service name starting lowercase
    String serviceName = serviceNaming[svc.id]
    // service unmodified (starting with uppercase)
    String originalServiceName = svc.name

    // Generation
    tasks.named("generate${svc.name}", GenerateTask) {
        templateDir.set("$projectDir/repo/templates-v7/typescript")

        apiNameSuffix.set('Api')
        additionalProperties.putAll([
                'modelPropertyNaming'  : 'original',
                'serviceName'          : serviceName,
                'originalServiceName'  : originalServiceName,
                'enumPropertyNaming'   : 'PascalCase',
        ])

        // for webhooks apply extra config.yaml (to generate WebhookHandler)
        if (serviceId.endsWith("webhooks")) {
            configFile.set("$projectDir/config.yaml")
        }
    }

    /**
     * Copy models task
     * - copy generated models from build (generated code) to the library `/src/typings` folder
     * - rename to start with lowercase (to follow naming conventions)
     * - rename specific files:
     *      - all.ts must be renamed to models.ts
     *      - webhookHandler.ts must be renamed to specific handler (i.e. reportWebhooksHandler.ts)
     */
    def deployModels = tasks.register("deploy${svc.name}Models", Sync) {
        group 'deploy'
        description "Deploy $svc.name models into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        from(layout.buildDirectory.dir("services/$svc.id/models")) {
            eachFile { fileCopyDetails ->
                def name = fileCopyDetails.name
                if (name && name.length() > 0) {
                    // copy and rename to start with lowercase
                    fileCopyDetails.name = name[0].toLowerCase() + name.substring(1)
                }
            }

            // Rename specific files
            rename { fileName ->
                if (fileName == "all.ts") {
                    // renaming to preserve backward compatibility with previous versions of the Node library
                    return "models.ts"
                } else if (fileName == "webhookHandler.ts") {
                    // rename to create specific handler (i.e. reportWebhooksHandler.ts)
                    def handlerName = "${svc.name}Handler.ts"
                    return handlerName[0].toLowerCase() + handlerName.substring(1)
                }
                return fileName
            }

            includeEmptyDirs = false
        }
        into layout.projectDirectory.dir("repo/src/typings/" + serviceName)
    }


    /**
     * Copy services task
     * - copy generated models from build (generated code) to the library services folder
     * - rename to start with lowercase (to follow naming conventions)
     *
     * Note: webhook specs (i.e. ConfigurationWebhooks, etc.. ) are skipped because Webhooks generation must only creates models
    */
    def deployServices = tasks.register("deploy${svc.name}Services", Sync) {
        group 'deploy'
        description "Deploy $svc.name into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }
        onlyIf { !svc.webhook } // skip webhooks (this task is for generating service classes only)

        from(layout.buildDirectory.dir("services/$svc.id/apis")) {
            include '*Api.ts'
            eachFile { fileCopyDetails ->
                def name = fileCopyDetails.name
                if (name && name.length() > 0) {
                    // copy and rename to start with lowercase
                    fileCopyDetails.name = name[0].toLowerCase() + name.substring(1)
                }
            }
            includeEmptyDirs = false
        }
        into layout.projectDirectory.dir("repo/src/services/" + serviceName)
        // copy index.ts (export service classes)
        from(layout.buildDirectory.dir("services/$svc.id")) {
            include 'index.ts'
        }
    }

    tasks.named(svc.id) { dependsOn deployModels, deployServices }
}

// Test binlookup
tasks.named('binlookup') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/typings/binLookup/amount.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/services/binLookupApi.ts").exists()
    }
}
// Test checkout
tasks.named('checkout') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/typings/checkout/models.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/typings/checkout/objectSerializer.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/typings/checkout/amount.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/services/checkout/paymentsApi.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/services/checkout/index.ts").exists()
    }
}
// Test balanceplatform
tasks.named('balanceplatform') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/typings/balancePlatform/models.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/typings/balancePlatform/objectSerializer.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/typings/balancePlatform/amount.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/services/balancePlatform/accountHoldersApi.ts").exists()
        assert file("${layout.projectDirectory}/repo/src/services/balancePlatform/index.ts").exists()
    }
}
// Test acswebhooks
tasks.named('acswebhooks') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/typings/acsWebhooks/amount.ts").exists()
        // verify Webhook Handler is created
        assert file("${layout.projectDirectory}/repo/src/typings/acsWebhooks/acsWebhooksHandler.ts").exists()
        // verify objectSerializer is created
        assert file("${layout.projectDirectory}/repo/src/typings/acsWebhooks/objectSerializer.ts").exists()
        // verify no service package is created for a webhook (Webhooks generation must only creates models)
        assert !file("${layout.projectDirectory}/repo/src/services/acsWebhooks").exists()
        // verify no API class is created for a webhook (Webhooks generation must only creates models)
        assert !file("${layout.projectDirectory}/repo/src/services/acsWebhooksApi.ts").exists()
    }
}
