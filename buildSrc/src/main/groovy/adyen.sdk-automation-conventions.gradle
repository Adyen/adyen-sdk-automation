import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    generator = project.name
    templates = 'templates'
    services = [
            // Payments
            new Service(name: 'Checkout', version: 71),
            new Service(name: 'Payout', version: 68),
            new Service(name: 'Recurring', version: 68),
            new Service(name: 'BinLookup', version: 54),
            // Point of Sale
            new Service(name: 'POSTerminalManagement', spec: 'TfmAPI', version: 1),
            // Management
            new Service(name: 'Management', version: 3),
            new Service(name: 'BalanceControl', version: 1),
            // Adyen for Platforms
            new Service(name: 'LegalEntityManagement', spec: 'LegalEntity', version: 3),
            new Service(name: 'BalancePlatform', version: 2),
            new Service(name: 'Transfers', spec: 'Transfer', version: 4),
            new Service(name: 'DataProtection', version: 1),
            // Classic Payments
            new Service(name: 'Payment', version: 68),
            // Others
            new Service(name: 'StoredValue', version: 46),
    ]
    serviceName = ''
}

class Service {
    String name, spec
    int version

    String getSpec() { spec ?: name }

    String getId() { name.toLowerCase() }
}

// Generate a full client for each service
project.ext.services.each { Service svc ->
    def generate = tasks.register("generate$svc.name", GenerateTask) {
        description "Generate a $project.name client for $svc.name."
        dependsOn 'clone'
        dependsOn ':specs'

        // Current service being processed
        project.ext.serviceName = svc.name

        generatorName.set(project.ext.generator as String)
        inputSpec.set("$rootDir/schema/json/${svc.spec}Service-v${svc.version}.json")
        outputDir.set("$buildDir/services/${svc.id}")
        templateDir.set("$projectDir/repo/$project.ext.templates")
        validateSpec.set(false)
        skipValidateSpec.set(true)
        reservedWordsMappings.set([
                "configuration": "configuration"
        ])
        additionalProperties.set([
                'serviceName': project.ext.serviceName,
        ])

        if (project.ext.has('configFile')) {
            configFile.set("$projectDir/repo/$project.ext.configFile")
        }
    }

    tasks.register(svc.id) {
        description "Base task for $svc.name."
        dependsOn generate
    }
}

tasks.register('services') {
    description 'Generate code for multiple services.'
    dependsOn project.ext.services.collect { it.id }
}

tasks.named('generateCheckout', GenerateTask) {
    inlineSchemaNameMappings.set([
            'PaymentRequest_paymentMethod'        : 'CheckoutPaymentMethod',
            'DonationPaymentRequest_paymentMethod': 'DonationPaymentMethod',
    ])
}

tasks.register('clone', Exec) {
    def uri = "https://github.com/Adyen/adyen-$project.name-api-library.git"
    def dest = 'repo'
    description "Clone this project's repository."
    commandLine 'git', 'clone', uri, '--single-branch', dest
    outputs.dir dest
    onlyIf { !file(dest).exists() }
}

// Disable generator caching
tasks.withType(GenerateTask).configureEach {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
}

tasks.register('clean', Delete) {
    delete buildDir
}

tasks.register('addPMTable', Copy) {
    dependsOn("clone")
    dependsOn(":pmTable")
    from(rootProject.file('PaymentMethodOverview.md'))
    into layout.projectDirectory.dir("repo")
}