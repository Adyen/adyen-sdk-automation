import com.adyen.sdk.Service
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'adyen.sdk-automation-conventions'
}

project.ext {
    generator = 'java'
}

def services = project.ext.services as List<Service>
def smallServices = project.ext.smallServices as List<Service>

// Deployment: generate models/services
services.each { Service svc ->

    // Generation
    def serviceName = project.ext.serviceNaming[svc.id] as String
    def serviceId = serviceName.toLowerCase()
    def modelNamespace = "com.adyen.model.${serviceId}"

    tasks.named("generate${svc.name}", GenerateTask) {
        library.set("jersey3")
        modelPackage.set(modelNamespace.replace('/', '.'))
        apiPackage.set("com.adyen.service.${serviceId}")
        apiNameSuffix.set('Api')
        additionalProperties.putAll([
                'dateLibrary'    : 'java8',
                'openApiNullable': 'false',
        ])
    }

    // Copy models
    def deployModels = tasks.register("deploy${svc.name}Models", Sync) {
        group 'deploy'
        description "Deploy $svc.name models into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        from layout.buildDirectory.dir("services/$svc.id/src/main/java/com/adyen/model/${serviceId}")
        into layout.projectDirectory.dir("repo/src/main/java/com/adyen/model/" + serviceId)
    }

    // Copy services
    def deployServices = tasks.register("deploy${svc.name}Services", Sync) {
        group 'deploy'
        description "Deploy $svc.name services into the repo."
        dependsOn "deploy${svc.name}Models"
        outputs.upToDateWhen { false }

        from layout.buildDirectory.dir("services/$svc.id/src/main/java/com/adyen/service/${serviceId}")
        into layout.projectDirectory.dir("repo/src/main/java/com/adyen/service/" + serviceId)
    }

    // Copy serializers
    def deploySerializers = tasks.register("deploy${svc.name}Serializers", Copy) {
        group 'deploy'
        description "Deploy $svc.name serializers into the repo."
        dependsOn "deploy${svc.name}Services"
        outputs.upToDateWhen { false }

        // move serializer (JSON.java ) into model folder
        def jsonJavaFile = layout.buildDirectory.file("services/$svc.id/src/main/java/com/adyen/service/JSON.java")

        from jsonJavaFile
        into layout.buildDirectory.file("services/$svc.id/src/main/java/com/adyen/model/${serviceId}")

        doLast {
            if (jsonJavaFile.get().asFile.exists()) {
                delete(jsonJavaFile)
            } else {
                println(jsonJavaFile)
                println("Source file ${jsonJavaFile} not found for deletion.")
            }
        }
    }

    tasks.named(svc.id) { dependsOn deployModels, deployServices, deploySerializers }
}

// Tests
tasks.named('binlookup') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/main/java/com/adyen/model/binlookup/Amount.java").exists()
        assert file("${layout.projectDirectory}/repo/src/main/java/com/adyen/service/BinLookupServiceApi.java").exists()
    }
}
tasks.named('checkout') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/main/java/com/adyen/model/checkout/Amount.java").exists()
        assert file("${layout.projectDirectory}/repo/src/main/java/com/adyen/service/checkout/PaymentsApi.java").exists()
    }
}
tasks.named('acswebhooks') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/main/java/com/adyen/model/acswebhooks/Amount.java").exists()
        assert !file("${layout.projectDirectory}/repo/src/main/java/com/adyen/service/acswebhooks").exists()
        assert !file("${layout.projectDirectory}/repo/src/main/java/com/adyen/service/AcsWebhooksApi.java").exists()
    }
}

